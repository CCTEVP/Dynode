{
  "openapi": "3.0.0",
  "info": {
    "title": "Dynode API",
    "version": "1.0.0",
    "description": "API documentation for Dynode endpoints"
  },
  "servers": [
    { "url": "https://localhost:3000", "description": "Local server" }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "paths": {
    "/login": {
      "post": {
        "summary": "User login and JWT token generation",
        "tags": ["Authorization"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": { "type": "string" },
                  "password": { "type": "string" }
                },
                "required": ["username", "password"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "JWT token returned",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": { "type": "string" }
                  }
                }
              }
            }
          },
          "401": { "description": "Invalid credentials" }
        },
        "security": []
      }
    },
    "/data/users/create": {
      "post": {
        "summary": "Register a new user",
        "tags": ["Users"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": { "type": "string" },
                  "password": { "type": "string", "format": "password" },
                  "name": { "type": "string" }
                },
                "required": ["username", "password", "name"]
              }
            }
          }
        },
        "responses": {
          "201": { "description": "User registered successfully" },
          "400": { "description": "Username, password, and name required" },
          "409": { "description": "Username already exists" },
          "500": { "description": "Error registering user" }
        }
      }
    },
    "/data/users/reset/{id}": {
      "patch": {
        "summary": "Reset user password",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "The user's MongoDB _id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "newPassword": { "type": "string", "format": "password" }
                },
                "required": ["username", "newPassword"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Password reset successfully" },
          "400": { "description": "Username and newPassword required" },
          "404": { "description": "User not found" },
          "500": { "description": "Error resetting password" }
        }
      }
    },
    "/data/creatives": {
      "get": {
        "summary": "Get all creatives",
        "tags": ["Creatives"],
        "responses": {
          "200": { "description": "Creatives data retrieved" },
          "401": { "description": "Unauthorized" }
        }
      }
    },
    "/data/creatives/{id}": {
      "get": {
        "summary": "Get identified creative data",
        "tags": ["Creatives"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "The creatives's MongoDB _id"
          }
        ],
        "responses": {
          "200": { "description": "Creatives data retrieved" },
          "401": { "description": "Unauthorized" }
        }
      }
    },
    "/data/creatives/assemblies": {
      "get": {
        "summary": "Get assembled creatives data",
        "tags": ["Creatives: Assembled"],
        "responses": {
          "200": { "description": "Creatives data retrieved" },
          "401": { "description": "Unauthorized" }
        }
      },
      "post": {
        "summary": "Post assembled creatives data",
        "tags": ["Creatives: Assembled"],
        "responses": {
          "200": { "description": "Creatives data created" },
          "401": { "description": "Unauthorized" }
        }
      },
      "put": {
        "summary": "Put assembled creatives data",
        "tags": ["Creatives: Assembled"],
        "responses": {
          "200": { "description": "Creatives data changed" },
          "401": { "description": "Unauthorized" }
        }
      },
      "delete": {
        "summary": "Delete assembled creatives data",
        "tags": ["Creatives: Assembled"],
        "responses": {
          "200": { "description": "Creatives data deleted" },
          "401": { "description": "Unauthorized" }
        }
      }
    },
    "/data/creatives/assemblies/{id}/package": {
      "get": {
        "summary": "Get assembled creative ZIP package (URL)",
        "tags": ["Creatives: Assembled"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "The creatives's MongoDB _id"
          }
        ],
        "responses": {
          "200": { "description": "Creatives ZIP Package retrieved." },
          "401": { "description": "Unauthorized" }
        }
      },
      "post": {
        "summary": "Build assembled creative ZIP package",
        "tags": ["Creatives: Assembled"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "The creatives's MongoDB _id"
          }
        ],
        "responses": {
          "200": { "description": "Creatives ZIP Package built." },
          "401": { "description": "Unauthorized" }
        }
      }
    },
    "/data/creatives/dynamics": {
      "get": {
        "summary": "Get dynamic creatives data",
        "tags": ["Creatives: Dynamic"],
        "responses": {
          "200": { "description": "Creatives data retrieved" },
          "401": { "description": "Unauthorized" }
        }
      },
      "post": {
        "summary": "Post dynamic creatives data",
        "tags": ["Creatives: Dynamic"],
        "responses": {
          "200": { "description": "Creatives data created" },
          "401": { "description": "Unauthorized" }
        }
      },
      "put": {
        "summary": "Put dynamic creatives data",
        "tags": ["Creatives: Dynamic"],
        "responses": {
          "200": { "description": "Creatives data changed" },
          "401": { "description": "Unauthorized" }
        }
      },
      "delete": {
        "summary": "Delete dynamic creatives data",
        "tags": ["Creatives: Dynamic"],
        "responses": {
          "200": { "description": "Creatives data deleted" },
          "401": { "description": "Unauthorized" }
        }
      }
    },
    "/data/creatives/interactives": {
      "get": {
        "summary": "Get interactive creatives data",
        "tags": ["Creatives: Interactive"],
        "responses": {
          "200": { "description": "Creatives data retrieved" },
          "401": { "description": "Unauthorized" }
        }
      },
      "post": {
        "summary": "Post interactive creatives data",
        "tags": ["Creatives: Interactive"],
        "responses": {
          "200": { "description": "Creatives data created" },
          "401": { "description": "Unauthorized" }
        }
      },
      "put": {
        "summary": "Put interactive creatives data",
        "tags": ["Creatives: Interactive"],
        "responses": {
          "200": { "description": "Creatives data changed" },
          "401": { "description": "Unauthorized" }
        }
      },
      "delete": {
        "summary": "Delete interactive creatives data",
        "tags": ["Creatives: Interactive"],
        "responses": {
          "200": { "description": "Creatives data deleted" },
          "401": { "description": "Unauthorized" }
        }
      }
    },
    "/files/media": {
      "get": {
        "summary": "Get media files",
        "tags": ["Files"],
        "responses": {
          "200": {
            "description": "Media files retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" }
                  }
                }
              }
            }
          },
          "401": { "description": "Unauthorized" }
        }
      }
    },
    "/data/users/edit/{id}": {
      "put": {
        "summary": "Edit user fields",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "The user's MongoDB _id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": { "type": "string" },
                  "password": { "type": "string", "format": "password" },
                  "name": { "type": "string" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "User updated successfully" },
          "400": {
            "description": "User ID and at least one field to update are required"
          },
          "404": { "description": "User not found" },
          "500": { "description": "Error updating user" }
        },
        "security": [{ "bearerAuth": [] }]
      }
    }
  }
}
