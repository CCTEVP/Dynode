{
  "openapi": "3.0.0",
  "info": {
    "title": "Dynode API",
    "version": "1.0.0",
    "description": "API documentation for Dynode endpoints"
  },
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "Local server"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "paths": {
    "/login": {
      "post": {
        "summary": "User login and JWT token generation",
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  }
                },
                "required": [
                  "username",
                  "password"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "JWT token returned",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials"
          }
        },
        "security": []
      }
    },
    "/data/components": {
      "get": {
        "summary": "Get all components",
        "tags": [
          "Components"
        ],
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "The type of components to retrieve (e.g., 'layout', 'widget', etc.)."
          }
        ],
        "responses": {
          "200": {
            "description": "Components data retrieved"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/data/components/{id}": {
      "get": {
        "summary": "Get identified component data",
        "tags": [
          "Components"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The component's MongoDB _id"
          }
        ],
        "responses": {
          "200": {
            "description": "Component data retrieved"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/data/creatives/assemblies": {
      "get": {
        "summary": "Get assembled creatives data",
        "tags": [
          "Creatives: Assembled"
        ],
        "parameters": [
          {
            "name": "children",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "description": "If true, include children in the response; if false, return only one level."
          }
        ],
        "responses": {
          "200": {
            "description": "Creatives data retrieved"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "summary": "Post assembled creatives data",
        "tags": [
          "Creatives: Assembled"
        ],
        "responses": {
          "200": {
            "description": "Creatives data created"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "summary": "Put assembled creatives data",
        "tags": [
          "Creatives: Assembled"
        ],
        "responses": {
          "200": {
            "description": "Creatives data changed"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "summary": "Delete assembled creatives data",
        "tags": [
          "Creatives: Assembled"
        ],
        "responses": {
          "200": {
            "description": "Creatives data deleted"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/data/creatives/assemblies/{id}": {
      "get": {
        "summary": "Get assembled creative data",
        "tags": [
          "Creatives: Assembled"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The creatives's MongoDB _id"
          },
          {
            "name": "children",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "description": "If true, include children in the response; if false, return only one level."
          }
        ],
        "responses": {
          "200": {
            "description": "Creatives ZIP Package retrieved."
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "summary": "Build assembled creative ZIP package",
        "tags": [
          "Creatives: Assembled"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The creatives's MongoDB _id"
          }
        ],
        "responses": {
          "200": {
            "description": "Creatives ZIP Package built."
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/data/creatives/dynamics": {
      "get": {
        "summary": "Get dynamic creatives data",
        "tags": [
          "Creatives: Dynamic"
        ],
        "parameters": [
          {
            "name": "children",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "description": "If true, include children in the response; if false, return only one level."
          }
        ],
        "responses": {
          "200": {
            "description": "Creatives data retrieved"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/data/creatives/dynamics/{id}": {
      "get": {
        "summary": "Get dynamic creatives data",
        "tags": [
          "Creatives: Dynamic"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The creatives's MongoDB _id"
          },
          {
            "name": "children",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "description": "If true, include children in the response; if false, return only one level."
          }
        ],
        "responses": {
          "200": {
            "description": "Creatives data retrieved"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "summary": "Post dynamic creatives data",
        "tags": [
          "Creatives: Dynamic"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The creatives's MongoDB _id"
          }
        ],
        "responses": {
          "200": {
            "description": "Creatives data created"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "summary": "Put dynamic creatives data",
        "tags": [
          "Creatives: Dynamic"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The creatives's MongoDB _id"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Fields to update in the creative document",
                "additionalProperties": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Creatives data changed"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "summary": "Delete dynamic creatives data",
        "tags": [
          "Creatives: Dynamic"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The creatives's MongoDB _id"
          }
        ],
        "responses": {
          "200": {
            "description": "Creatives data deleted"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/data/creatives/interactives": {
      "get": {
        "summary": "Get interactive creatives data",
        "tags": [
          "Creatives: Interactive"
        ],
        "parameters": [
          {
            "name": "children",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "description": "If true, include children in the response; if false, return only one level."
          }
        ],
        "responses": {
          "200": {
            "description": "Creatives data retrieved"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "summary": "Post interactive creatives data",
        "tags": [
          "Creatives: Interactive"
        ],
        "responses": {
          "200": {
            "description": "Creatives data created"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "summary": "Put interactive creatives data",
        "tags": [
          "Creatives: Interactive"
        ],
        "responses": {
          "200": {
            "description": "Creatives data changed"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "summary": "Delete interactive creatives data",
        "tags": [
          "Creatives: Interactive"
        ],
        "responses": {
          "200": {
            "description": "Creatives data deleted"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/data/creatives": {
      "get": {
        "summary": "Get all creatives",
        "tags": [
          "Creatives"
        ],
        "parameters": [
          {
            "name": "children",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "description": "If true, include children in the response; if false, return only one level."
          }
        ],
        "responses": {
          "200": {
            "description": "Creatives data retrieved"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/data/creatives/{id}": {
      "get": {
        "summary": "Get identified creative data",
        "tags": [
          "Creatives"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The creatives's MongoDB _id"
          }
        ],
        "responses": {
          "200": {
            "description": "Creatives data retrieved"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/data/users/create": {
      "post": {
        "summary": "Register a new user",
        "tags": [
          "Users"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string",
                    "format": "password"
                  },
                  "name": {
                    "type": "string"
                  }
                },
                "required": [
                  "username",
                  "password",
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully"
          },
          "400": {
            "description": "Username, password, and name required"
          },
          "409": {
            "description": "Username already exists"
          },
          "500": {
            "description": "Error registering user"
          }
        }
      }
    },
    "/data/users/reset/{id}": {
      "patch": {
        "summary": "Reset user password",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The user's MongoDB _id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "newPassword": {
                    "type": "string",
                    "format": "password"
                  }
                },
                "required": [
                  "username",
                  "newPassword"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset successfully"
          },
          "400": {
            "description": "Username and newPassword required"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Error resetting password"
          }
        }
      }
    },
    "/data/users/edit/{id}": {
      "put": {
        "summary": "Edit user fields",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The user's MongoDB _id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string",
                    "format": "password"
                  },
                  "name": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully"
          },
          "400": {
            "description": "User ID and at least one field to update are required"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Error updating user"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/files/assets/{filename}.{extension}": {
      "get": {
        "summary": "Get media files",
        "tags": [
          "Files"
        ],
        "parameters": [
          {
            "name": "filename",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The asset's filename"
          },
          {
            "name": "extension",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The asset's extension"
          }
        ],
        "responses": {
          "200": {
            "description": "Media files retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/files/assets/": {
      "post": {
        "summary": "Upload media files",
        "tags": [
          "Files"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    },
                    "description": "The source files"
                  }
                },
                "required": [
                  "files"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Media files uploaded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "asset": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/files/logs": {
      "post": {
        "summary": "Post log records",
        "tags": [
          "Files"
        ],
        "description": "Submits new log records to the system.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "level": {
                    "type": "string",
                    "description": "The log level (e.g., \"info\", \"warn\", \"error\").",
                    "example": "info"
                  },
                  "message": {
                    "type": "string",
                    "description": "The log message.",
                    "example": "Sample message."
                  },
                  "meta": {
                    "type": "object",
                    "description": "Additional metadata for the log entry.",
                    "example": {}
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Log record successfully posted.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Log record received."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid input data."
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}